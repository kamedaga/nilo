WHITESPACE = _{ " " | "\t" | NEWLINE | COMMENT }
NEWLINE    = _{ "\r\n" | "\n" }
COMMENT    = _{ "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE? }

ident = @{ (ASCII_ALPHANUMERIC | "_" | "-")+ }

// 階層的フロー糖衣構文用の修飾された識別子
qualified_ident = @{ ident ~ ("::" ~ ident)* }

// 置換後（ASCII と " " の両対応・簡易エスケープ付）
string           = @{ dq_string | fancy_dq_string }
dq_string        = @{ "\"" ~ ( "\\\"" | "\\\\" | (!"\""  ~ ANY) )* ~ "\"" }
fancy_dq_string  = @{ "\"\"\"" ~ ( "\\\"" | "\\\\" | (!"\"\"\"" ~ ANY) )* ~ "\"\"\"" }

number  = @{ "-"? ~ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? }
bool    = { "true" | "false" }

// 相対単位対応の新しい値型
dimension_value = { auto_keyword | calc_expr | (number ~ unit_suffix?) }
unit_suffix = { "px" | "vw" | "vh" | "ww" | "wh" | "%" | "rem" | "em" }
auto_keyword = { "auto" }

// 計算式（括弧必須）
calc_expr = { "(" ~ calc_term ~ (calc_op ~ calc_term)* ~ ")" }
calc_term = { number ~ unit_suffix? }
calc_op = { "+" | "-" | "*" | "/" }

array   = { "[" ~ (expr ~ ("," ~ expr)*)? ~ ","? ~ "]" }
object  = { "{" ~ (object_entry ~ ("," ~ object_entry)*)? ~ ","? ~ "}" }
object_entry = { (string | ident) ~ ":" ~ expr }

expr    = { comparison_expr }

// 比較演算式の定義（最低優先度）
comparison_expr = { arithmetic_expr ~ (comparison_op ~ arithmetic_expr)* }

// 算術演算式の定義
arithmetic_expr = { term ~ (arithmetic_op ~ term)* }
term = { factor ~ (factor_op ~ factor)* }
factor = { primary }

comparison_op = { "==" | "!=" | "<=" | ">=" | "<" | ">" }
arithmetic_op = { "+" | "-" }
factor_op = { "*" | "/" }

primary = { 
    match_expr 
    | function_call  // ★ 追加: 通常の関数呼び出し（onclick用）
    | string 
    | dimension_value 
    | number 
    | bool 
    | path 
    | ident 
    | array 
    | object 
    | has_slot_check    // ★ Phase 2: has_slot(name)
    | "(" ~ expr ~ ")" 
}

// ★ Phase 2: スロット存在チェック
has_slot_check = { "has_slot" ~ "(" ~ ident ~ ")" }

style_arg = { "style" ~ ":" ~ expr }

file       = { SOI ~ (flow_def | namespaced_flow_def | namespace_def | timeline_def | component_def)* ~ EOI }

// 既存のシンプルなフロー定義（単一ページ対応）
flow_def   = { "flow" ~ "{" ~ start_def ~ transition_def* ~ "}" }

// 名前空間付きフロー定義 flow Login { ... }
namespaced_flow_def = { "flow" ~ ident ~ "{" ~ namespaced_start_def ~ namespaced_transition_def* ~ "}" }

// 名前空間定義 namespace Login { timeline Menu {} ... }
namespace_def = { "namespace" ~ ident ~ "{" ~ (timeline_def | component_def)* ~ "}" }

start_def  = { "start" ~ ":" ~ (timeline_with_url | qualified_ident) }
namespaced_start_def = { "start" ~ ":" ~ (qualified_ident | ident) }

timeline_with_url = { qualified_ident ~ "(" ~ string ~ ")" }

transition_def = { transition_source ~ "->" ~ transition_targets }

// 遷移元：単一の識別子または識別子の配列
transition_source = { "[" ~ qualified_ident ~ ("," ~ qualified_ident)* ~ "]" | qualified_ident }

// 遷移先：単一のターゲットまたはターゲットの配列
transition_targets = { "[" ~ flow_target ~ ("," ~ flow_target)* ~ "]" | flow_target }

flow_target = { timeline_with_url | qualified_ident }

// 名前空間付きフロー内の遷移定義
namespaced_transition_def = { namespaced_transition_source ~ "->" ~ namespaced_transition_targets }
namespaced_transition_source = { "[" ~ (qualified_ident | ident) ~ ("," ~ (qualified_ident | ident))* ~ "]" | qualified_ident | ident }
namespaced_transition_targets = { "[" ~ (qualified_ident | ident) ~ ("," ~ (qualified_ident | ident))* ~ "]" | qualified_ident | ident }

timeline_def = { "timeline" ~ qualified_ident ~ timeline_url? ~ timeline_config? ~ "{" ~ font_def? ~ view_nodes? ~ "}" }
timeline_url = { "(" ~ string ~ ")" }
timeline_config = { "(" ~ timeline_param ~ ("," ~ timeline_param)* ~ ")" }
timeline_param = { "style" ~ ":" ~ expr }

font_def = { "font" ~ ":" ~ string }

component_def = { "component" ~ ident ~ component_params? ~ "{" ~ font_def? ~ view_nodes? ~ "}" }
component_params = { "(" ~ (component_param ~ ("," ~ component_param)*)? ~ ")" }
component_param = { 
    style_param 
    | typed_param       // ★ Phase 2: name: Type = default
    | optional_param    // ★ Phase 2: name: Type?
    | enum_param        // ★ Phase 2: name: ("a" | "b" | "c")
    | ident             // ★ 既存: 単純なパラメータ名
}

// ★ Phase 2: 型付きパラメータ定義
typed_param = { ident ~ ":" ~ param_type ~ ("=" ~ expr)? }
optional_param = { ident ~ ":" ~ param_type ~ "?" }
enum_param = { ident ~ ":" ~ "(" ~ string ~ ("|" ~ string)* ~ ")" ~ ("=" ~ string)? }

// ★ Phase 2: パラメータ型
param_type = { 
    "Object" | "object" 
    | "Array" | "array" 
    | "Function" | "function" 
    | "String" | "string" 
    | "Number" | "number" 
    | "Bool" | "bool" 
}

style_param = { "style" ~ ":" ~ expr }

view_nodes = { view_node* }

action_node = _{
      state_set
    | state_toggle
    | list_append
    | list_insert
    | list_remove
    | list_clear
    | rust_call
}

view_node = _{
      list_append
    | list_insert
    | list_remove
    | list_clear
    | vstack_node
    | hstack_node
    | text
    | button
    | text_input
    | image
    | dynamic_section
    | match_block
    | foreach_node
    | if_node
    | navigate_action
    | spacing_node
    | state_set
    | state_toggle
    | let_decl
    | const_decl
    | when_block
    | rust_call
    | component_call
    | slot_node          // ★ Phase 2: スロット挿入
    | stencil_call
}

// ★ Phase 2: スロット構文
slot_node = { "slot" ~ ident }

vstack_node = { "VStack" ~ "(" ~ style_arg? ~ ")" ~ "{" ~ view_nodes? ~ "}" }
hstack_node = { "HStack" ~ "(" ~ style_arg? ~ ")" ~ "{" ~ view_nodes? ~ "}" }

arg_item = { style_arg | expr }

text = { "Text" ~ "(" ~ expr ~ ("," ~ arg_item)* ~ ")" }

button = { "Button" ~ "("
    ~ "id" ~ ":" ~ WHITESPACE* ~ (ident | string)
    ~ "," ~ WHITESPACE* ~ "label" ~ ":" ~ WHITESPACE* ~ string
    ~ ("," ~ WHITESPACE* ~ "onclick" ~ ":" ~ WHITESPACE* ~ expr)?
    ~ ("," ~ WHITESPACE* ~ style_arg)?
    ~ ")"
}

image = { "Image" ~ "(" ~ string ~ ("," ~ arg_item)* ~ ")" }

text_input = { "TextInput" ~ "(" ~ expr ~ ("," ~ arg_item)* ~ ")" }

dynamic_section = { "dynamic_section" ~ ident ~ "(" ~ style_arg? ~ ")" ~ "{" ~ view_nodes? ~ "}" }

match_expr = {
    "match" ~ expr ~ "{"
    ~ expr_match_arm* ~ expr_default_arm? ~ "}"
}

match_block = {
    "match" ~ expr ~ ("(" ~ style_arg? ~ ")")? ~ "{"
    ~ match_arm* ~ default_arm? ~ "}"
}
match_arm = { "case" ~ expr ~ "{" ~ view_nodes? ~ "}" }
default_arm = { "default" ~ "{" ~ view_nodes? ~ "}" }

// 式用のmatch arm（文字列値を返す）
expr_match_arm = { "case" ~ expr ~ "{" ~ expr ~ "}" }
expr_default_arm = { "default" ~ "{" ~ expr ~ "}" }

navigate_action = { "navigate_to" ~ "(" ~ qualified_ident ~ ")" }

spacing_node = { "Spacing" ~ "(" ~ (dimension_value | number)? ~ ")" | "SpacingAuto" }

// ★ 通常の関数呼び出し（onclick用など）
function_call = { ident ~ "(" ~ (expr ~ ("," ~ expr)*)? ~ ")" }

rust_call = { ident ~ "!" ~ "(" ~ (arg_item ~ ("," ~ arg_item)*)? ~ ")" }

component_call = { ident ~ "(" ~ (arg_item ~ ("," ~ arg_item)*)? ~ ")" }

// ★ 型アノテーション構文の追加（setキーワードはオプション）
state_set    = { "set"? ~ path ~ type_annotation? ~ "=" ~ expr }
state_toggle = { ident ~ "=" ~ "!" ~ ident }

// ★ ローカル変数宣言
let_decl     = { "let" ~ ident ~ type_annotation? ~ "=" ~ expr }
const_decl   = { "const" ~ ident ~ type_annotation? ~ "=" ~ expr }

// ★ 型システム（左再帰を避ける）
type_annotation = { ":" ~ type_expr }
type_expr = { primitive_type ~ "[]"* }
primitive_type = { "Number" | "String" | "Bool" | "Any" }

// リスト操作の関数呼び出し風構文
list_append = { "append" ~ "(" ~ path ~ "," ~ expr ~ ")" }
list_insert = { "insert" ~ "(" ~ path ~ "," ~ number ~ "," ~ expr ~ ")" }
list_remove = { "remove" ~ "(" ~ path ~ "," ~ expr ~ ")" }
list_clear = { "clear" ~ "(" ~ path ~ ")" }

// ステンシルは限定的に定義する
stencil_name = { "rect" | "circle" | "triangle" | "text" | "image" | "rounded_rect" }
stencil_call = { stencil_name ~ "(" ~ stencil_args? ~ ")" }
stencil_args = { (stencil_arg ~ ("," ~ stencil_arg)*)? }
stencil_arg  = { ident ~ ":" ~ stencil_value }
stencil_value = { number | string | bool }

when_block = { "when" ~ event_expr ~ "{" ~ view_nodes? ~ "}" }
event_expr = { user_event }
user_event = { "user" ~ "." ~ event_kind ~ "(" ~ ident ~ ")" }
event_kind = { "click" }

// 制御フロー構文の追加
foreach_node = { "foreach" ~ ident ~ "in" ~ foreach_iterable ~ foreach_style? ~ "{" ~ view_nodes? ~ "}" }
foreach_iterable = { path | ident }
foreach_style = { "(" ~ style_arg ~ ")" }
if_node = { "if" ~ expr ~ ("(" ~ style_arg? ~ ")")? ~ "{" ~ view_nodes? ~ "}" ~ ("else" ~ "{" ~ view_nodes? ~ "}")? }

// パス識別子の定義（プロパティアクセス対応、メソッド呼び出し含む）
method_call = { ident ~ "(" ~ ")" }
path = @{ ident ~ ("." ~ (method_call | ident))* }

button_id = { "id" ~ ":" ~ ident }
button_label = { "label" ~ ":" ~ string }
path_arg = { "path" ~ ":" ~ string }
size_arg = { "size" ~ ":" ~ number ~ "," ~ number }